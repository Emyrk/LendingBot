// Code generated by protoc-gen-go.
// source: scraperGRPC/scraper.proto
// DO NOT EDIT!

/*
Package scraperGRPC is a generated protocol buffer package.

It is generated from these files:
	scraperGRPC/scraper.proto

It has these top-level messages:
	Message
	HelloReply
	Empty
	LoadLastReply
*/
package scraperGRPC

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type Message struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Message) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// The response message containing the greetings
type HelloReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *HelloReply) Reset()                    { *m = HelloReply{} }
func (m *HelloReply) String() string            { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()               {}
func (*HelloReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HelloReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type LoadLastReply struct {
	Day    string `protobuf:"bytes,1,opt,name=day" json:"day,omitempty"`
	Second string `protobuf:"bytes,2,opt,name=second" json:"second,omitempty"`
}

func (m *LoadLastReply) Reset()                    { *m = LoadLastReply{} }
func (m *LoadLastReply) String() string            { return proto.CompactTextString(m) }
func (*LoadLastReply) ProtoMessage()               {}
func (*LoadLastReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LoadLastReply) GetDay() string {
	if m != nil {
		return m.Day
	}
	return ""
}

func (m *LoadLastReply) GetSecond() string {
	if m != nil {
		return m.Second
	}
	return ""
}

func init() {
	proto.RegisterType((*Message)(nil), "scraperGRPC.Message")
	proto.RegisterType((*HelloReply)(nil), "scraperGRPC.HelloReply")
	proto.RegisterType((*Empty)(nil), "scraperGRPC.Empty")
	proto.RegisterType((*LoadLastReply)(nil), "scraperGRPC.LoadLastReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ScraperGRPC service

type ScraperGRPCClient interface {
	// Sends a greeting
	// rpc SayHello (HelloRequest) returns (HelloReply) {}
	GetLastDayAndSecond(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LoadLastReply, error)
	LoadDay(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Empty, error)
	ReadNext(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Message, error)
}

type scraperGRPCClient struct {
	cc *grpc.ClientConn
}

func NewScraperGRPCClient(cc *grpc.ClientConn) ScraperGRPCClient {
	return &scraperGRPCClient{cc}
}

func (c *scraperGRPCClient) GetLastDayAndSecond(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LoadLastReply, error) {
	out := new(LoadLastReply)
	err := grpc.Invoke(ctx, "/scraperGRPC.ScraperGRPC/GetLastDayAndSecond", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scraperGRPCClient) LoadDay(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/scraperGRPC.ScraperGRPC/LoadDay", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scraperGRPCClient) ReadNext(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/scraperGRPC.ScraperGRPC/ReadNext", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ScraperGRPC service

type ScraperGRPCServer interface {
	// Sends a greeting
	// rpc SayHello (HelloRequest) returns (HelloReply) {}
	GetLastDayAndSecond(context.Context, *Empty) (*LoadLastReply, error)
	LoadDay(context.Context, *Message) (*Empty, error)
	ReadNext(context.Context, *Empty) (*Message, error)
}

func RegisterScraperGRPCServer(s *grpc.Server, srv ScraperGRPCServer) {
	s.RegisterService(&_ScraperGRPC_serviceDesc, srv)
}

func _ScraperGRPC_GetLastDayAndSecond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScraperGRPCServer).GetLastDayAndSecond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scraperGRPC.ScraperGRPC/GetLastDayAndSecond",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScraperGRPCServer).GetLastDayAndSecond(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScraperGRPC_LoadDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScraperGRPCServer).LoadDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scraperGRPC.ScraperGRPC/LoadDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScraperGRPCServer).LoadDay(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScraperGRPC_ReadNext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScraperGRPCServer).ReadNext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scraperGRPC.ScraperGRPC/ReadNext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScraperGRPCServer).ReadNext(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ScraperGRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scraperGRPC.ScraperGRPC",
	HandlerType: (*ScraperGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLastDayAndSecond",
			Handler:    _ScraperGRPC_GetLastDayAndSecond_Handler,
		},
		{
			MethodName: "LoadDay",
			Handler:    _ScraperGRPC_LoadDay_Handler,
		},
		{
			MethodName: "ReadNext",
			Handler:    _ScraperGRPC_ReadNext_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scraperGRPC/scraper.proto",
}

func init() { proto.RegisterFile("scraperGRPC/scraper.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x51, 0xcf, 0x4b, 0xc3, 0x30,
	0x18, 0x5d, 0x15, 0x57, 0xfd, 0x86, 0x28, 0x51, 0xa4, 0xd6, 0x8b, 0x44, 0x10, 0x4f, 0x51, 0x14,
	0x05, 0x8f, 0xce, 0x49, 0x3d, 0x4c, 0x29, 0xdd, 0xc1, 0x73, 0x6c, 0x3e, 0xa6, 0x90, 0x2e, 0x21,
	0x09, 0xb8, 0xfc, 0x81, 0xfe, 0x5f, 0x92, 0xac, 0xe2, 0x0a, 0xc5, 0xdb, 0xfb, 0x5e, 0x5e, 0xde,
	0xf7, 0xe3, 0xc1, 0xb1, 0xad, 0x0d, 0xd7, 0x68, 0x8a, 0xaa, 0x7c, 0xbc, 0x6c, 0x31, 0xd3, 0x46,
	0x39, 0x45, 0x46, 0x6b, 0x4f, 0xf4, 0x0c, 0xd2, 0x17, 0xb4, 0x96, 0xcf, 0x91, 0x64, 0x90, 0x36,
	0x2b, 0x98, 0x25, 0xa7, 0xc9, 0xc5, 0x4e, 0xf5, 0x5b, 0xd2, 0x73, 0x80, 0x67, 0x94, 0x52, 0x55,
	0xa8, 0xa5, 0xff, 0x47, 0x97, 0xc2, 0xd6, 0x53, 0xa3, 0x9d, 0xa7, 0xf7, 0xb0, 0x3b, 0x55, 0x5c,
	0x4c, 0xb9, 0x75, 0xab, 0x3f, 0xfb, 0xb0, 0x29, 0xb8, 0x6f, 0xf5, 0x01, 0x92, 0x23, 0x18, 0x5a,
	0xac, 0xd5, 0x42, 0x64, 0x1b, 0x91, 0x6c, 0xab, 0xeb, 0xef, 0x04, 0x46, 0xb3, 0xbf, 0x01, 0x49,
	0x01, 0x07, 0x05, 0xba, 0xe0, 0x34, 0xe1, 0xfe, 0x61, 0x21, 0x66, 0x51, 0x46, 0x08, 0x5b, 0xdb,
	0x82, 0xc5, 0xae, 0x79, 0xde, 0xe1, 0x3a, 0x03, 0xd0, 0x01, 0xb9, 0x85, 0x34, 0x50, 0x13, 0xee,
	0xc9, 0x61, 0x47, 0xd8, 0xee, 0x9f, 0xf7, 0x58, 0xd2, 0x01, 0xb9, 0x83, 0xed, 0x0a, 0xb9, 0x78,
	0xc5, 0xa5, 0xeb, 0x6d, 0xda, 0xeb, 0x45, 0x07, 0xe3, 0x2b, 0x38, 0xf9, 0x54, 0x6c, 0x6e, 0x74,
	0xcd, 0x70, 0xc9, 0x1b, 0x2d, 0xd1, 0xb2, 0x8f, 0x70, 0xc4, 0x2f, 0x65, 0xa4, 0x18, 0xef, 0xc5,
	0x83, 0xbe, 0x05, 0x5c, 0x86, 0x54, 0xca, 0xe4, 0x7d, 0x18, 0xe3, 0xb9, 0xf9, 0x09, 0x00, 0x00,
	0xff, 0xff, 0xb9, 0x7f, 0x08, 0xd6, 0xbb, 0x01, 0x00, 0x00,
}
